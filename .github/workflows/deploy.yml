name: Build, Deploy and Release

on:
  push:
    branches: [main]

jobs:
  build_web:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # Разрешение на запись в репозиторий
      pages: write      # Специфичное разрешение для GitHub Pages
    outputs:
      release_tag: ${{ steps.set_release_info.outputs.release_tag }}
      full_version: ${{ steps.version.outputs.full_version }}
      version_part: ${{ steps.version.outputs.version }}
      build_number: ${{ steps.version.outputs.build }}
      commits: ${{ steps.commits.outputs.commits }}
      has_commits: ${{ steps.commits.outputs.has_commits }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Auto increment build number
        id: version
        run: |
          # Читаем текущую версию из pubspec.yaml
          CURRENT_VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //')
          VERSION_PART=$(echo $CURRENT_VERSION | cut -d'+' -f1)
          
          # Получаем общее количество коммитов в репозитории
          TOTAL_COMMITS=$(git rev-list --count HEAD)
          
          # Используем количество коммитов как build number
          NEW_VERSION="$VERSION_PART+$TOTAL_COMMITS"
          
          # Обновляем pubspec.yaml только если версия изменилась
          if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
            sed -i "s/version: $CURRENT_VERSION/version: $NEW_VERSION/" pubspec.yaml
            echo "Updated version from $CURRENT_VERSION to $NEW_VERSION"
          else
            echo "Version unchanged: $CURRENT_VERSION"
          fi
          
          # Используем новый формат для передачи данных между шагами
          echo "version=$VERSION_PART" >> $GITHUB_OUTPUT
          echo "build=$TOTAL_COMMITS" >> $GITHUB_OUTPUT
          echo "full_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "total_commits=$TOTAL_COMMITS" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: flutter pub get

      - name: Build web
        run: flutter build web --release --base-href /${{ github.event.repository.name }}/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/web

      - name: Get commit history
        id: commits
        run: |
          # Получаем последний тег (релиз)
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            # Получаем коммиты с последнего релиза и форматируем как ссылки
            COMMIT_LIST=$(git log --oneline --no-merges --format="%H %s" ${LAST_TAG}..HEAD | head -10 | while read hash message; do
              short_hash=${hash:0:7}
              echo "- [\`$short_hash\`](https://github.com/${{ github.repository }}/commit/$hash) $message"
            done)
            echo "commits<<EOF" >> $GITHUB_OUTPUT
            echo "$COMMIT_LIST" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "has_commits=true" >> $GITHUB_OUTPUT
          else
            # Если это первый релиз, получаем все коммиты
            COMMIT_LIST=$(git log --oneline --no-merges --format="%H %s" | head -10 | while read hash message; do
              short_hash=${hash:0:7}
              echo "- [\`$short_hash\`](https://github.com/${{ github.repository }}/commit/$hash) $message"
            done)
            echo "commits<<EOF" >> $GITHUB_OUTPUT
            echo "$COMMIT_LIST" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "has_commits=true" >> $GITHUB_OUTPUT
          fi

      - name: Set release information
        id: set_release_info
        run: |
          RELEASE_TAG="v${{ steps.version.outputs.version }}-${{ steps.version.outputs.build }}"
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "Created release tag: $RELEASE_TAG"



  build_windows:
    runs-on: windows-latest
    needs: build_web
    permissions:
      contents: write   # Разрешение на запись в репозиторий
    outputs:
      exe_size: ${{ steps.get_exe_size.outputs.size }}
      zip_size: ${{ steps.get_zip_size.outputs.size }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
          cache-key: flutter-packages-${{ hashFiles('pubspec.yaml') }}

      - name: Install dependencies
        run: flutter pub get

      - name: Update version info
        run: |
          $full_version = '${{ needs.build_web.outputs.full_version }}'
          (Get-Content pubspec.yaml) -replace '^version: .+', "version: $full_version" | Set-Content pubspec.yaml
          (Get-Content deploy/run_app.dart) -replace '^const String version = .+', "const String version = '$full_version';" | Set-Content deploy/run_app.dart
        shell: pwsh

      - name: Build Windows executable
        run: |
          flutter create --platforms windows --empty .
          flutter build windows --release --obfuscate --split-debug-info=build/debug-info --tree-shake-icons 

      - name: Package application with deploy.dart
        run: |
          cd deploy
          dart pub get
          dart run .\deploy.dart "..\\build\\windows\\x64\\runner\\Release"
          cd ..
      
      - name: Download Resource Hacker
        run: |
          $url = "https://www.angusj.com/resourcehacker/resource_hacker.zip"
          $output = "ResourceHacker.zip"
          Invoke-WebRequest -Uri $url -OutFile $output
          Write-Host "Downloaded Resource Hacker"
          Expand-Archive -Path ResourceHacker.zip -DestinationPath ResourceHacker
          Write-Host "Unzipped Resource Hacker"

      - name: Apply icon to portable EXE
        run: |
          $hacker = "ResourceHacker\\ResourceHacker.exe"
          $exeFile = "deploy\\cube.exe"
          $iconFile = "windows\\runner\\resources\\app_icon.ico"
          if (-not (Test-Path $exeFile)) { throw "EXE file not found: $exeFile" }
          if (-not (Test-Path $iconFile)) { throw "Icon file not found: $iconFile" }
          if (-not (Test-Path $iconFile)) { throw "Icon file not found: $iconFile" }
          & $hacker -open $exeFile -save $exeFile -action addoverwrite -res $iconFile -mask ICONGROUP,MAINICON
          Write-Host "Icon applied to $exeFile"

      - name: Verify executable exists
        run: |
          if (-not (Test-Path -Path "deploy/cube.exe")) {
              Write-Error "cube.exe not found!"
              exit 1
          }

      - name: Get EXE size
        id: get_exe_size
        run: |
          $size = (Get-Item "deploy\cube.exe").Length
          echo "size=$size" >> $env:GITHUB_OUTPUT

      - name: Create ZIP archive
        run: |
          Compress-Archive -Path .\build\windows\x64\runner\Release\ -DestinationPath "deploy\cube.zip"

      - name: Get original folder size
        id: get_zip_size
        run: |
          $folder = "build\windows\x64\runner\Release\"
          $size = (Get-ChildItem -Recurse -File $folder | Measure-Object -Property Length -Sum).Sum
          echo "size=$size" >> $env:GITHUB_OUTPUT

      - name: Update GitHub Release with Windows artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build_web.outputs.release_tag }}
          update: true
          files: |
            deploy/cube.exe
            deploy/cube.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



  build_android:
    runs-on: ubuntu-latest
    needs: build_web
    outputs:
      apk_size: ${{ steps.get_apk_size.outputs.apk_size }}
      v7a_size: ${{ steps.get_apk_size.outputs.v7a_size }}
      v8a_size: ${{ steps.get_apk_size.outputs.v8a_size }}
      x86_64_size: ${{ steps.get_apk_size.outputs.x86_64_size }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
          cache-key: flutter-packages-${{ hashFiles('pubspec.yaml') }}

      - name: Update version info
        run: |
          sed -i "s/version: .*/version: ${{ needs.build_web.outputs.full_version }}/" pubspec.yaml

      - name: Install dependencies
        run: flutter pub get

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android licenses
        run: flutter doctor --android-licenses

      - name: Build APK
        run: |
          flutter build apk --release --obfuscate --split-debug-info=build/debug-info --tree-shake-icons
          flutter build apk --release --split-per-abi --obfuscate --split-debug-info=build/debug-info --tree-shake-icons

      - name: Rename APK
        run: |
          mv build/app/outputs/flutter-apk/app-release.apk                "cube.apk"
          mv build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk    "cube_v7a.apk"
          mv build/app/outputs/flutter-apk/app-arm64-v8a-release.apk      "cube_v8a.apk"
          mv build/app/outputs/flutter-apk/app-x86_64-release.apk         "cube_x86_64.apk"
        shell: bash

      - name: Get APK sizes
        id: get_apk_size
        run: |
          echo "apk_size=$(stat -c%s cube.apk)" >> $GITHUB_OUTPUT
          echo "v7a_size=$(stat -c%s cube_v7a.apk)" >> $GITHUB_OUTPUT
          echo "v8a_size=$(stat -c%s cube_v8a.apk)" >> $GITHUB_OUTPUT
          echo "x86_64_size=$(stat -c%s cube_x86_64.apk)" >> $GITHUB_OUTPUT

      - name: Update GitHub Release with APK
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build_web.outputs.release_tag }}
          update: true
          files: |
            cube.apk
            cube_v7a.apk
            cube_v8a.apk
            cube_x86_64.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



  create_release:
    runs-on: ubuntu-latest
    needs: [build_web, build_windows, build_android]
    steps:
      - name: Generate release notes
        run: |
          cat > release_notes.md << EOF
          ## Автоматический релиз
          
          ### Версия
          - **Версия:** ${{ needs.build_web.outputs.version_part }}
          - **Сборка:** ${{ needs.build_web.outputs.build_number }}
          - **Полная версия:** ${{ needs.build_web.outputs.full_version }}
          
          ### Технические детали
          - Дата сборки: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          - Коммит: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          EOF
          
          # Добавляем изменения если есть
          if [ "${{ needs.build_web.outputs.has_commits }}" = "true" ]; then
            cat >> release_notes.md << EOF
          
          ### Изменения
          ${{ needs.build_web.outputs.commits }}
          EOF
          fi
          
          # Добавляем информацию о размерах файлов
          cat >> release_notes.md << EOF
          
          ### Ссылки для скачивания
          
          *   **Веб-приложение:** [Открыть в браузере](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/)
          
          *   **Windows:**
              *   [Исполняемый файл (cube.exe)](${{ needs.build_web.outputs.release_tag }}/cube.exe) ($(( ${{ needs.build_windows.outputs.exe_size }} / 1048576 )) MB)
              *   [Архив для Windows (cube.zip)](${{ needs.build_web.outputs.release_tag }}/cube.zip) ($(( ${{ needs.build_windows.outputs.zip_size }} / 1048576 )) MB)
          
          *   **Android:**
              *   [APK для любой архитектуры](${{ needs.build_web.outputs.release_tag }}/cube.apk) ($(( ${{ needs.build_android.outputs.apk_size }} / 1048576 )) MB)
              *   [APK для ARMv7 (armeabi-v7a)](${{ needs.build_web.outputs.release_tag }}/cube_v7a.apk) ($(( ${{ needs.build_android.outputs.v7a_size }} / 1048576 )) MB)
              *   [APK для ARM64 (arm64-v8a)](${{ needs.build_web.outputs.release_tag }}/cube_v8a.apk) ($(( ${{ needs.build_android.outputs.v8a_size }} / 1048576 )) MB)
              *   [APK для x86_64](${{ needs.build_web.outputs.release_tag }}/cube_x86_64.apk) ($(( ${{ needs.build_android.outputs.x86_64_size }} / 1048576 )) MB)
          EOF

      - name: Edit Release Description
        run: |
          gh release edit "${{ needs.build_web.outputs.release_tag }}" \
            --title "Cube ${{ needs.build_web.outputs.version_part }} (${{ needs.build_web.outputs.build_number }})" \
            --notes-file release_notes.md \
            --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
